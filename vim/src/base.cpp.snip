snippet dump
    dump(${1});${0}

snippet debug
    debug(${1});${0}

snippet cout
    cout << ${1} << endl;${0}

snippet puts
    cout << "${1}" << endl;${0}

snippet endl
    cout << endl;

snippet iota
    iota(${1:a}.begin(), $1.end(), ${2:0});${0}

snippet next_permutation
    next_permutation(${1:a}.begin(), $1.end())${0}

snippet rep
    REP (${1:i}, ${2:n}) {
        ${0}
    }

snippet rrep
    RREP (${1:i}, ${2:n}) {
        ${0}
    }

snippet for
    FOR (${1:i}, ${2:0}, ${3:n}) {
        ${0}
    }

snippet rfor
    RFOR (${1:i}, ${2:0}, ${3:n}) {
        ${0}
    }

snippet sz
    SZ(${1:c})${0}


snippet sort
    sort(all(${1:c})${2:#:,});${0}


snippet auto
    for (auto& ${1:e} : ${2:c}) {
        ${0}
    }
snippet cauto
    for (const auto& ${1:e} : ${2:c}) {
        ${0}
    }

snippet lb
    lower_bound(all(${1:c}), ${2:x})${0}

snippet ub
    upper_bound(all(${1:c}), ${2:x})${0}

snippet unique
    sort(all(${1:c}));
    $1.erase(unique(all($1)), end($1));

snippet sum
    accumulate(all(${1:c}), ${2:0})${0}

snippet max
    *max_element(all(${1:c}))${0}

snippet min
    *min_element(all(${1:c}))${0}

snippet priority_queue
    priority_queue<${1:pair<int,int>}>${0}

snippet priority_queue_greater
    priority_queue<${1:pair<int,int>}, vector<$1>, greater<$1>>${0}

snippet binary_search
    auto check = [&](${1:int} k) {
        ${2:condition}
    };

    $1 ng = ${3:-1}, ok = ${4:n};
    while (abs(ok - ng) > ${5:1}) {
        $1 mid = (ng + ok) / 2;
        (check(mid) ? ok : ng) = mid;
    }

snippet ternary_search
    auto f = [&](${1:double} x) {
        ${2:function}
    };

    $1 lb = ${3:-1e9}, ub = ${4:1e9};
    while (abs(f(lb) - f(ub)) > ${5:1e-9}) {
        double m1 = (2 * lb + ub) / 3,
               m2 = (lb + 2 * ub) / 3;

        if (f(m1) < f(m2)) lb = m1;
        else ub = m2;
    }

snippet next_combination
    int64_t next_combination(int64_t mask) {
        int64_t x = mask & -mask, y = mask + x;
        return (((mask & ~y) / x) >> 1) | y;
    }

snippet random
    const int SEED = 0;
    std::mt19937 mt(SEED);

snippet clock
    struct Clock {
        clock_t start;
        Clock() : start(clock()) {}
        double operator()() {
            return static_cast<double>(clock() - start) / CLOCKS_PER_SEC;
        }
    };

snippet powmod
    int64_t powmod(int64_t a, int64_t n, int64_t mod) {
        int64_t ret = 1, tmp = a;
        while (n) {
            if (n & 1) (ret *= tmp) %= mod;
            (tmp *= tmp) %= mod;
            n >>= 1;
        }
        return ret;
    }

snippet __lcm
    int64_t __lcm(int64_t a, int64_t b) {
        return a / __gcd(a, b) * b;
    }

snippet two_pointers
    int l = 0, r = 0;
    auto check = [&]() {
        ${1:condition}
    };

    while (l < ${2:n}) {
        assert(l <= r);
        while (r < $2 and !check()) {
            ++r;
        }
        if (!check()) {
            break;
        }
        // [l, r) satisfies the condition.
        ++l;
    }

snippet brute_forth
    vector<int> a(${1:n}+1);
    while (!a[$1]) {
        ${0}
        for (int i = 0; ++a[i] == ${2:k}; ++i) a[i] = 0;
    }

snippet dfs
    auto dfs = [&](auto&& dfs, ${1:int v, int p}){
        ${0}
    };
