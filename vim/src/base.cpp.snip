snippet dump
    DUMP(${1});${0}

snippet cout
    cout << ${1} << endl;${0}

snippet printf
    printf("${1}"${2});${0}

snippet puts
    printf("${1}\n"${2});${0}

snippet space
    putchar(' ');${0}
snippet endl
    putchar('\n');${0}

snippet infty
    numeric_limits<${1:int}>::max()${0}

snippet iota
    iota(${1:a}.begin(), $1.end(), ${2:0});${0}

snippet next_permutation
    next_permutation(${1:a}.begin(), $1.end())${0}


snippet for
    for (int ${1:i} = ${2:0}; $1 < ${3:n}; ++$1) {
        ${0}
    }

snippet fore
    for (int ${1:i} = ${2:0}; $1 <= ${3:n}; ++$1) {
        ${0}
    }

snippet rfor
    for (int ${1:i} = ${2:n}-1; $1 >= ${3:0}; --$1) {
        ${0}
    }

snippet rfore
    for (int ${1:i} = ${2:n}; $1 >= ${3:0}; --$1) {
        ${0}
    }

snippet rep
    for (int ${1:i} = 0; $1 < ${2:n}; ++$1) {
        ${0}
    }

snippet rrep
    for (int ${1:i} = ${2:n}-1; $1 >= 0; --$1) {
        ${0}
    }

snippet All
    ${1:c}.begin(), $1.end()${0}

snippet rAll
    ${1:c}.rbegin(), $1.rend()${0}

snippet sort
    sort(${1:c}.begin(), $1.end()${2:#:,});${0}

snippet rsort
    sort(${1:c}.rbegin(), $1.rend());${0}

snippet fill
    fill(${1:c}.begin(), $1.end(), ${2:x});${0}

snippet each
    for (${1:auto} ${2:e} : ${3:c}) {
        ${0}
    }

snippet lb
    lower_bound(${1:c}.begin(), $1.end(), ${2:x})${0}

snippet ub
    upper_bound(${1:c}.begin(), $1.end(), ${2:x})${0}

snippet count
    upper_bound(${1:c}.begin(), $1.end(), ${2:x}) - lower_bound($1.begin(), $1.end(), $2)${0}

snippet unique
    sort(${1:c}.begin(), $1.end());
    $1.erase(unique($1.begin(), $1.end()), $1.end());

snippet copy
    copy(${1:src}.begin(), $1.end(), ${2:dst}.begin());${0}

snippet exist
    ${1:st}.find(${2:elem}) != $1.end()${0}

snippet sum
    accumulate(${1:c}.begin()${2:#:+a}, $1.end()${3:#:+b}, ${4:0})${0}

snippet max
    *max_element(${1:c}.begin(), $1.end())${0}

snippet min
    *min_element(${1:c}.begin(), $1.end())${0}

snippet priority_queue
    priority_queue<${1:pair<int,int>}>${0}

snippet priority_queue_greater
    priority_queue<${1:pair<int,int>}, vector<$1>, greater<$1>>${0}

snippet make_v
    make_v<${1:int}>(${2:n})${0}

snippet make_vector
    make_vector<${1:int}>(${2:n}, ${3:0})${0}

snippet binary_search
    auto check = [&](${1:int} k) {
        ${2:condition}
    };

    $1 ng = ${3:-1}, ok = ${4:n};
    while (abs(ok - ng) > 1) {
        $1 mid = (ng + ok) / 2;
        (check(mid) ? ok : ng) = mid;
    }

snippet next_combination
    int64_t next_combination(int64_t mask) {
        int64_t x = mask & -mask, y = mask + x;
        return (((mask & ~y) / x) >> 1) | y;
    }

snippet random
    const int SEED = 0;
    std::mt19937 mt(SEED);

snippet clock
    struct Clock {
        clock_t start;
        Clock() : start(clock()) {}
        double operator()() {
            return static_cast<double>(clock() - start) / CLOCKS_PER_SEC;
        }
    };

snippet topological_sort
    vector<int> topological_sort(const vector<vector<int>>& G)
    {
        int n = G.size();
        vector<int> num(n), ord;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < G[i].size(); ++j) {
                ++num[G[i][j]];
            }
        }
        stack<int> st;
        for(int i = 0; i < num.size(); ++i) {
            if (num[i] == 0) {
                st.push(i);
            }
        }
        while (!st.empty()) {
            int i = st.top(); st.pop();
            ord.push_back(i);
            for(int j = 0; j < G[i].size(); ++j) {
                --num[G[i][j]];
                if (num[G[i][j]] == 0) {
                    st.push(G[i][j]);
                }
            }
        }
        return ord;
    }
